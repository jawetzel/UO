//Author: Jawetzel
//Release Date: 6/27/2025
//Version: 1.0

// Requierments: 
// 	A guy with chiv and the ability to beat a horse to death 
//		It will use enemy of one, and chiv heal self between horses 
// 
// Optional: 
//	Chromatic totems in backpack - not in a sub bag 
// 
// Operation: 
// Look down to coordOptions - this is a list of the different spawn locations it can handle 
// Look down to var penCoords = coordOptions.T2AEastSouth;
// 		This is where you are deciing which spawn location you want to run out of
// 		You would change which option is selected. Ex: 
//			var penCoords = coordOptions.T2AEastSouth;
//			var penCoords = coordOptions.T2AEastNorth;

var coordOptions = {
	T2AEastSouth: [	
			{ x: 6127, y: 3950 }
		],
	T2AEastNorth: [	
			{x: 6110, y: 3865}
		],
	T2AWest: [
		{ x: 5942, y: 4058 },		
		{ x: 5964, y: 4070 },
		{ x: 5975, y: 4030 },
	],
	IlshKirinPass: [
		{ x:26 , y: 957}
	]
};

var penCoords = coordOptions.T2AEastSouth;

//----YOU SHOULD NOT NEED TO EDIT BELOW THIS LINE----
//----YOU SHOULD NOT NEED TO EDIT BELOW THIS LINE----
//----YOU SHOULD NOT NEED TO EDIT BELOW THIS LINE----


function Autostart()
{
	
	Orion.Wait(6000);	
	MainTamerLoop();
}

var chromaticTotemGraphic = '0x9F1A';
var backpackChromaticTotemGraphic = '0x9F1B';

var AttackEnemy = function(){
	var enemy = Orion.FindType('!0x0673', "any", "ground", "live|ignoreself", 5, 'gray');	
	if(enemy && enemy.length > 0){
		var enemyObject = Orion.FindObject(enemy[0]);
		Orion.Attack(enemy[0]);
		Orion.WalkTo(enemyObject.X(), enemyObject.Y(),  enemyObject.Z(), 1, 255, 1, 1, 2000);		
		Orion.Wait(1500);
	}
	return;
}



function MainTamerLoop() {
	Orion.OpenContainer(backpack);
	Orion.Wait(2500);
	var start = 0;	
    while (!Player.Dead()) {
    	if(Orion.Now() > start){
			start = Orion.Now() + 300000;
			Orion.Say("All follow me");
			Orion.Say("All guard me");			
		}
    	Orion.Print(IsOtherTotemActive());
    	if(IsOtherTotemActive()){
    		Orion.Wait(1000);
    		continue;
    	}
        for (var i = 0; i < penCoords.length; i++) {
            while (Player.X() !== penCoords[i].x || Player.Y() !== penCoords[i].y) {
            	Orion.WalkTo(penCoords[i].x, penCoords[i].y, Player.Z(), 0, 255, 1, 1, 1000);
            	 if( Player.X() === penCoords[i].x || Player.Y() === penCoords[i].y){
	            	 PlaceTotem();
	            }
            	AttackEnemy();                
            	LookForHorse();
            	 if(Player.Hits() < 100) {
	            	Orion.Cast("Close wounds");
	            	Orion.WaitForTarget(2000);
	            	Orion.TargetObject(Player.Serial());
	            	Orion.Wait(750);
	            }
            }
            if( Player.X() === penCoords[i].x || Player.Y() === penCoords[i].y){
            	 PlaceTotem();
            }
           
            AttackEnemy();                
            LookForHorse();
            Orion.Wait(500);
            
            if(Player.Hits() < 100) {
            	Orion.Cast("Close wounds");
            	Orion.WaitForTarget(2000);
            	Orion.TargetObject(Player.Serial());
            	Orion.Wait(750);
            }
           
        }
    }
}

var IsOtherTotemActive = function() {
	var myName = Player.Name().toUpperCase().replace("LORD ", "");
	var totems = Orion.FindTypeEx(chromaticTotemGraphic, 'any', "ground", "", 30);
	if(!totems || totems.length === 0) return false;
	return totems[0].Properties().toUpperCase().indexOf(myName.toUpperCase()) === -1;
}

var isTotemActive = function(){
	var groundObjects = Orion.FindType('any', 'any', "ground", "", 10);
	var totems = Orion.FindTypeEx(chromaticTotemGraphic, 'any', "ground", "", 30);
	if(!totems || totems.length === 0) return false;
	return true;
}

var PlaceTotem = function() {
	var totems = Orion.FindType(backpackChromaticTotemGraphic, 'any', 'backpack');
	if(!totems || totems.length === 0) return;
	if (isTotemActive()) return;
	Orion.Wait(2000);
	Orion.UseObject(totems[0]);
	Orion.Wait(2000);
}


var LookForHorse = function() {
    var horses = Orion.FindTypeEx('0x0673', '-1', ground, 'mobile|live', 30);
    if(horses && horses.length > 0) {
    	horses = horses.filter(function(horse){
    		var props = horse.Properties();
    		return props.indexOf("tame") === -1 && props.indexOf("bonded") === -1;
    	});
    }
    Orion.Wait(250);
    if(horses && horses.length > 0) {
    	Orion.Wait(1000);
    	var horse = Orion.FindObject(horses[0].Serial());    
    	if(!horse) return;
    	var color = horse.Color();
    	if(
    		//PARAGON 
    		color === '0x0501' || 
    		//Very Common
    		color === '0x0000' ||
    		//Common
    		color === '0x0ACB' || color === '0x0AC9' || 
    		//Uncommon
    		color === '0x09C4' || color === '0x0A76'  ||	color === '0x0848' ||
    		//Rare
    		color === '0x0A63'
    		)	 
    	{    		    	
    		Orion.Print("Killing Horse: " + color);
    		var start = Orion.Now();
		    var timeout = start + 45000;			   
    		while(Orion.Now() < timeout && Orion.FindObject(horses[0].Serial())){
    			var horse = Orion.FindObject(horses[0].Serial());
    			Orion.Print("Walking to horse");
    			if(!horse) break;
    			Orion.WalkTo(horse.X(), horse.Y(), horse.Z(), 0, 255, 1, 1, 5000);
    			Orion.Attack(horses[0].Serial());
    			if(!Orion.BuffExists('0x754e')){
		    		Orion.Cast('Enemy of One');
		    	}
    			Orion.Wait(1000);    		
				if(!Orion.AbilityStatus('Primary')){
					Orion.UseAbility('Primary');
	    			Orion.Wait(250);
				}	
				Orion.Wait(1000);    		
				if(!Orion.AbilityStatus('Primary')){
					Orion.UseAbility('Primary');
	    			Orion.Wait(250);
				}	
    		}    		
    	}
    	else if (    	    	
    		//Rare
    			color === '0x0A2D' ||    			
    			//Verry Rate
    			color === '0x081B' || color === '0x0AC1' || 
    			//Uber rare 
    			color === '0x0AD7' || color === '0x0ADD'
    		)
    	{
    		Orion.Print("Taming Horse: " + color);
    		AttemptTame(horses[0].Serial());
    	} else {
    		Orion.Print("I dont know what to do with this color: " + color);
    	}
    }
}

function AttemptTame(serial) {
    if (!serial || !Orion.ObjectExists(serial)) return;
    var horse = Orion.FindObject(serial);
    if (!horse) return;

    Orion.Print("Attempting to tame pretty horse...");

    // Step 1: Move within 2 tiles
    while (Orion.GetDistance(horse.Serial()) > 2) {
        Orion.WalkTo(horse.X(), horse.Y(), horse.Z());
        Orion.Wait(500);
        horse = Orion.FindObject(serial);
        if (!horse) return;
    }

    // Step 2: Begin taming
    Orion.UseSkill('Animal Taming');
    Orion.WaitTargetObject(serial);
    var start = Orion.Now();
    var timeout = start + 13000;

    while (Orion.Now() < timeout) {
        Orion.Wait(500);
        horse = Orion.FindObject(serial);
        if (!horse) return;

        // Reposition if too far
        if (Orion.GetDistance(horse.Serial()) > 2) {
            Orion.WalkTo(horse.X(), horse.Y(), horse.Z());
        }
    }

    // Step 3: Check tame status
    if (IsTamed(serial)) {
    	var color = horse.Color();
    	if(Player.Followers() < 4 && (color === '0x0A63' || color === '0x0A2D')){
    		Orion.Say("All follow me");
    		Orion.Say("All guard me");
    		Orion.Wait(500);
    	} else {
    		// logout 
    		DiscordAnnouncement();
        	Orion.CloseUO();
    	}
        
    } else if (Orion.ObjectExists(serial)) {
        AttemptTame(serial); // retry
    } else {
        Orion.IgnoreObject(serial);
    }
}


function IsTamed(serial) {
    var obj = Orion.FindObject(serial);
    if (!obj) return false;
    return obj.Properties().indexOf("tame") !== -1;
}

var parsePetNameFromColor = function (color){
	if(color === '0x0A63') {
		return "RareBlue"
	}
	if(color === '0x0A2D') {
		return "RarePurple"
	}

	if(color === '0x0AC1') {
		return "VeryDemonic"
	}
	if(color === '0x081B') {
		return "VeryRareAbyssal"
	}
	
	if(color === '0x0ADD') {
		return "UberRarePurple"
	}
	if(color === '0x0AD7'){
		return "UberRareBlack"
	}
	return "broken";
}

function performStables(){
	var horseId = Orion.ClientLastTarget();
	KillTarget(horseId);
}

function KillTarget(serial) {
    if (!serial || !Orion.ObjectExists(serial)) return;
    var target = Orion.FindObject(serial);
    if (!target) return;
    Orion.UseSkill('Animal Lore');
    Orion.WaitForTarget();
    Orion.TargetObject(serial);
    Orion.Wait(1500);
    var intensity = Math.round(PetIntensity(serial));
    var words = [
    	"Zero", "One", "Two", "Three", "Four",
   	 	"Five", "Six", "Seven", "Eight", "Nine"
  	];    
	var intensityString = intensity.toString().split('').map(function(number) { return words[number] }).join('');
	var petName = parsePetNameFromColor(target.Color()) + "-" + intensityString;
	Orion.Print(petName);
    Orion.RenameMount(serial, petName);
    Orion.Wait(2000);
    Orion.Say("stall");
    Orion.WaitForTarget();
    Orion.TargetObject(serial);
    Orion.Wait(2000);
   	Orion.Ignore(serial);
    Orion.Wait(1000);
}


var petCaps = {
	"0x0673": {
		minIntensity: 2102,
		bonusPoints: 70,
		hp: 200,		
		stam: 150,		
		mana: 150,		
		str: 420,		
		dex: 185,		
		int: 150,		
		resistPhys: 50,		
		resistFire: 45,		
		resistCold: 40,		
		resistPoison: 40,		
		resistEnergy: 40,
	}
}

var animalLoreGumpId = '0x000001DB';

var multipliers = {
	hpMultiplier: 3,
	stamMultiplier: .5,
	manaMultiplier: .5,
	strMultiplier: 3,
	dexMultiplier: .1,
	intMultiplier: .5,
	resistPhysMultiplier: 3,
	resistFireMultiplier: 3,
	resistColdMultiplier: 3,
	resistPoisonMultiplier: 3,
	resistEnergyMultiplier: 3
}

var petMenuTextIndexes = {
	0: {name: 'name'},
	//stats
	1: {name: 'hp', splitValue: true, firstNumber: false},
	2: {name: 'stam', splitValue: true, firstNumber: false},
	3: {name: 'mana', splitValue: true, firstNumber: false},
	4: {name: 'str', number: true},
	5: {name: 'dex', number: true},
	6: {name: 'int', number: true},
	//resists
	11: {name: 'resistPhys', percentageValue: true},
	12: {name: 'resistFire', percentageValue: true},
	13: {name: 'resistCold', percentageValue: true},
	14: {name: 'resistPoison', percentageValue: true},
	15: {name: 'resistEnergy', percentageValue: true},
	//Skills
	22: {name: 'wrestle', splitValue: true, firstNumber: true},
	23: {name: 'tactics', splitValue: true, firstNumber: true},
	24: {name: 'resist', splitValue: true, firstNumber: true},
	25: {name: 'healing', splitValue: true, firstNumber: true},
	26: {name: 'poisoning', splitValue: true, firstNumber: true},
	27: {name: 'detect', splitValue: true, firstNumber: true},
	28: {name: 'hiding', splitValue: true, firstNumber: true},
	29: {name: 'parry', splitValue: true, firstNumber: true},
	//skills page 2
	31: {name: 'mage', splitValue: true, firstNumber: true},
	32: {name: 'eval', splitValue: true, firstNumber: true},
	33: {name: 'med', splitValue: true, firstNumber: true},
	34: {name: 'necro', splitValue: true, firstNumber: true},
	35: {name: 'spiritSpeak', splitValue: true, firstNumber: true},
	36: {name: 'myst', splitValue: true, firstNumber: true},
	37: {name: 'focus', splitValue: true, firstNumber: true},
	38: {name: 'spellweaving', splitValue: true, firstNumber: true},
	39: {name: 'discord', splitValue: true, firstNumber: true},
	//skills page 3
	48: {name: 'bush', splitValue: true, firstNumber: true},
	49: {name: 'ninja', splitValue: true, firstNumber: true},
	51: {name: 'chiv', splitValue: true, firstNumber: true},
}


var GetLoreGump = function(){
	var count = Orion.GumpCount();
	for (var i = count - 1; i >= 0; i--)
    {
        var gump = Orion.GetGump(i);
		if(gump.ID() === animalLoreGumpId){
			return gump;
		}
    }
    return null;
}

var ParseValueFromText = function(text, index, pet){
	var regex = new RegExp(/<[^>]+>/g);
	var petCap = null;
	if(pet.name && petCaps[pet.graphic]){
		petCap = petCaps[pet.graphic];
	}
	if(!pet.intensityTotal) pet.intensityTotal = 0;
	if(!pet.intensityCapTotal) pet.intensityCapTotal = 0;
	var cleanText = text.replace(regex, "");
	if(!petMenuTextIndexes[index]) return pet;
	if(petMenuTextIndexes[index].splitValue){
		var values = cleanText.split("/");
		if(petMenuTextIndexes[index].firstNumber){
			pet[petMenuTextIndexes[index].name] = parseFloat(values[0]);
		} else {
			pet[petMenuTextIndexes[index].name] = parseFloat(values[1]);
		}
		if(petMenuTextIndexes[index].name === 'dex' || petMenuTextIndexes[index].name === 'stam'){
			if(pet[petMenuTextIndexes[index].name] < 125) pet[petMenuTextIndexes[index].name]  = 125;
		}
		if(petCap){
			pet[petMenuTextIndexes[index].name + 'Intensity'] = 
				pet[petMenuTextIndexes[index].name] * multipliers[petMenuTextIndexes[index].name + 'Multiplier'];
			pet[petMenuTextIndexes[index].name + 'IntensityCap'] = 
				petCap[petMenuTextIndexes[index].name] * multipliers[petMenuTextIndexes[index].name + 'Multiplier'];
			if(!isNaN(pet[petMenuTextIndexes[index].name + 'Intensity'])){
				pet.intensityTotal = pet.intensityTotal + pet[petMenuTextIndexes[index].name + 'Intensity'];
				pet.intensityCapTotal = pet.intensityCapTotal + pet[petMenuTextIndexes[index].name + 'IntensityCap'];
			}
		}
	} else if(petMenuTextIndexes[index].percentageValue){
		var parsedText = parseFloat(cleanText.split("%").join(""));
		pet[petMenuTextIndexes[index].name] = parsedText;
		if(petMenuTextIndexes[index].name === 'dex' || petMenuTextIndexes[index].name === 'stam' || 
			petMenuTextIndexes[index].name === 'int' || petMenuTextIndexes[index].name === 'mana'
		){
			if(pet[petMenuTextIndexes[index].name] < 125) pet[petMenuTextIndexes[index].name]  = 125;
		}
		if(petCap){
			pet[petMenuTextIndexes[index].name + 'Intensity'] = 
				pet[petMenuTextIndexes[index].name] * multipliers[petMenuTextIndexes[index].name + 'Multiplier'];
			pet[petMenuTextIndexes[index].name + 'IntensityCap'] = 
				petCap[petMenuTextIndexes[index].name] * multipliers[petMenuTextIndexes[index].name + 'Multiplier'];
			if(!isNaN(pet[petMenuTextIndexes[index].name + 'Intensity'])){
				pet.intensityTotal = pet.intensityTotal + pet[petMenuTextIndexes[index].name + 'Intensity'];
				pet.intensityCapTotal = pet.intensityCapTotal + pet[petMenuTextIndexes[index].name + 'IntensityCap'];
			}
		}
	} else if(petMenuTextIndexes[index].number){
		pet[petMenuTextIndexes[index].name] =  parseFloat(cleanText);
		if(petMenuTextIndexes[index].name === 'dex' || petMenuTextIndexes[index].name === 'stam'){
			if(pet[petMenuTextIndexes[index].name] < 125) pet[petMenuTextIndexes[index].name]  = 125;
		}
		if(petCap){
			pet[petMenuTextIndexes[index].name + 'Intensity'] = 
				pet[petMenuTextIndexes[index].name] * multipliers[petMenuTextIndexes[index].name + 'Multiplier'];
			pet[petMenuTextIndexes[index].name + 'IntensityCap'] = 
				petCap[petMenuTextIndexes[index].name] * multipliers[petMenuTextIndexes[index].name + 'Multiplier'];
			if(!isNaN(pet[petMenuTextIndexes[index].name + 'Intensity'])){
				pet.intensityTotal = pet.intensityTotal + pet[petMenuTextIndexes[index].name + 'Intensity'];
				pet.intensityCapTotal = pet.intensityCapTotal + pet[petMenuTextIndexes[index].name + 'IntensityCap'];
			}
		}		
	} else {
		pet[petMenuTextIndexes[index].name] =  cleanText;
	}
	return pet;
	
	
}

var GetIntensityFromPet = function(pet){
	if(pet.intensityTotal === 0 ||  pet.intensityCapTotal === 0) return null;
	var petName = pet.name;	
	var currentPetCaps = petCaps[pet.graphic];
	pet.intensityTotal = pet.intensityTotal + currentPetCaps.bonusPoints
	pet.intensityCapTotal = pet.intensityCapTotal + currentPetCaps.bonusPoints
	var maxDelta = pet.intensityCapTotal - currentPetCaps.minIntensity;
	var petDelta = pet.intensityTotal - currentPetCaps.minIntensity;
	var decimal = petDelta / maxDelta;
	var percent = decimal * 100;
	return percent.toFixed(2);
}

var closeGump = function(){
	var gump = GetLoreGump();
	if(!gump) return null;
	gump.Select(Orion.CreateGumpHook(0));
}

var PetIntensity = function(petId){
	var gump = GetLoreGump();
	if(!gump) return null;
	var textList = gump.TextList();
	
	var pet = {
		graphic: Orion.FindObject(petId).Graphic()

	};
	
	for(var i = 0; i < textList.length; i++){
		pet = ParseValueFromText(textList[i], i, pet);
	}
	var petIntensity = GetIntensityFromPet(pet);
	gump.Select(Orion.CreateGumpHook(0));	
	return petIntensity
	
	
}

var DiscordAnnouncement = function()
{
    // Discord
    var bot = "https://discord.com/api/webhooks/1393288961702625451/1sby71wuIadujsScIjTqBTYyLcHqCBPtCSYRv4IFKnKo-EksH_iwEvwkAB3O5MQet7Ix"; // Webhook url
    var charName = Player.Name();
    var paramText = "username="+charName+"&content=@everyone "+charName+" WE GOT A HORSIE!";
	Orion.HttpPost(bot, paramText);
}