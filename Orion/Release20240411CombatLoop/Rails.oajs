	
function RailRecorderGUI(){
	if (Shared.GetVar('placeholder') == null){
		Shared.AddVar('placeholder', 'Enter Rail File Name')
		}
	Orion.Wait(100)
	var g = Orion.CreateCustomGump(101099);
	g.Clear();
	g.SetCallback('OnClick');
	const width = 8;
	const height = 6;
	for (var y = 0; y < height; ++y) {
	for (var x = 0; x < width; ++x) {
      if (y == 0 && x == 0) {
        g.AddGumpPic(x * 35, y * 35, 0x9C40);
      }
      else if (x == 0 && y == height-1) {
        g.AddGumpPic(x * 35, y * 35, 0x9C46);
      }
      else if (x == 0 && y > 0 && y < height-1) {
        g.AddGumpPic(x * 35, y * 35, 0x9C43);
      }
      else if (x == width-1 && y > 0 && y < height-1) {
        g.AddGumpPic(x * 35, y * 35, 0x9C45);
      }
      else if (y == height-1 && x == width-1) {
        g.AddGumpPic(x * 35, y * 35, 0x9C48);
      } 
      else if (y == 0 && x == width-1) {
        g.AddGumpPic(x * 35, y * 35, 0x9C42);
      } 
      else if (y == 0 && x > 0 && x < width-1) {
        g.AddGumpPic(x * 35, y * 35, 0x9C41);
      } 
      else if (y == height-1 && x > 0 && x < width-1) {
        g.AddGumpPic(x * 35, y * 35, 0x9C47);
      }
      else {
        g.AddGumpPic(x * 35, y * 35, 0x9C44);
      }
    }
  }	//End of Background Setup
	prompt = 50
	arrow = 235    
	
	g.AddCheckerTrans(0, 0, x*35, y*35);		

	g.AddResizepic(25, prompt, '0x0BB8', 200, 20);
	g.AddTextEntry(1005, 25, prompt, '0x0052', '', 190, 20);
	g.SetTextEntryPlaceholderText(Shared.GetVar('placeholder'));
	g.AddButton(1000,230, prompt, '0x481', '0x482', '0x483', ' ')
	g.AddTooltip('Set Rail File Name')

	g.AddButton(2000, 250, 12, '0xA94', '0xA94', '0xA95', 0);
	g.AddTooltip('Close');	
	
	prompt+=30	

	over = 85
	g.AddButton(1099, over, prompt, '0x2A30', '0x2A30', '0x2A30', ' ')
	g.AddText(over+22, prompt+4, '0x796', "Add Coords");	
	g.AddTooltip('Add Coords')
	
	prompt+=30	
	g.AddButton(1100, over, prompt, '0x2A30', '0x2A30', '0x2A30', ' ')
	g.AddText(over+22, prompt+4, '0x796', "Add Recall");	
	g.AddTooltip('Add Recall')
	
	prompt+=30					
	g.AddText(25, prompt+10, '72', 'Status: ')
	g.AddText(75, prompt+10, '55',Orion.GetGlobal('gui_status'));

	g.SetNoClose(true);

	g.Update();
}


var OnClick = function(){
	var buttonID = CustomGumpResponse.ReturnCode();

	switch(buttonID){
		case 1000:
			Shared.AddVar('dir', '/' + CustomGumpResponse.Text(1005)  + ".txt")
			Shared.AddVar('placeholder',  CustomGumpResponse.Text(1005))
			UpdateGUIStatus(Shared.GetVar('dir') + ' selected.')						
			break;
			
		case 1099:
			AppendWaypoint()		
			break;
			
		case 1100: 
			AppendRecall()		
			break;
		
		case 2000:
			g = Orion.CreateCustomGump(101099)
			Shared.AddVar('placeholder', 'Enter Rail File Name')
			g.Close()
		}	
}  
	
var AppendRecall = function(){
	Orion.Print('Select Rune / Default runebook to recall off of');
	Orion.UseSkill('Animal Lore');
	Orion.WaitForTarget(2000);
	Orion.WaitForAddObject('recallTarget');
	var targetObject = Orion.FindObject(Orion.GetSerial('recallTarget'));
	var propsArray = targetObject.Properties().split('\n');
	Orion.Print(propsArray[propsArray.length - 1]);
	var waypoint = {
		type: 'recall',
		recallType: targetObject.Graphic(),
		recallContainer: targetObject.Container() === '0xFFFFFFFF' ? 'ground': 'backpack',
		recallName: propsArray[propsArray.length - 1]
	}
	
	var tmpFilePath = Orion.CurrentScriptDirPath() + Shared.GetVar('dir');
	var fileJson = [];
	var fileRead = ReadFile(tmpFilePath);
	Orion.Print("file Read");
	Orion.Print(tmpFilePath);
	Orion.Print(fileRead);
	if(fileRead){
		fileJson = fileRead;
	}

	var lastIndex = fileJson.length > 0 ? fileJson[fileJson.length -1].index : -1;
	waypoint.index = lastIndex + 1
	Orion.Print("Recording To Path: " + tmpFilePath);
	Orion.Print("Recording Rail Point: " + JSON.stringify(waypoint) );
	fileJson.push(waypoint);
	
	UpdateFile(tmpFilePath, fileJson);
	
}

var AppendWaypoint = function(){

	var tmpFilePath = Orion.CurrentScriptDirPath() + Shared.GetVar('dir');
	var recordingX = Player.X();
	var recordingY = Player.Y();
	var recordingZ = Player.Z();
	var railPoint = {type: "run", x: recordingX, y: recordingY, z: recordingZ};
	
	var fileJson = [];
	var fileRead = ReadFile(tmpFilePath);
	if(fileRead){
		fileJson = fileRead;
	}

	var lastIndex = fileJson.length > 0 ? fileJson[fileJson.length -1].index : -1;
	railPoint.index = lastIndex + 1
	Orion.Print("Recording To Path: " + tmpFilePath);
	Orion.Print("Recording Rail Point: " + JSON.stringify(railPoint) );
	fileJson.push(railPoint);
	
	UpdateFile(tmpFilePath, fileJson);
	
}

var ReadFile = function(tmpFilePath){
	var tmpFile = Orion.NewFile();
	tmpFile.Open(tmpFilePath);
	var fileJson = [];
	var filestring = tmpFile.ReadAll();
	if(filestring){
		fileJson = JSON.parse(filestring);
	}
	tmpFile.Close();
	return fileJson;
}
var UpdateFile = function(tmpFilePath, data){
	tmpFile = Orion.NewFile();
	tmpFile.Remove(tmpFilePath);
	tmpFile.Append(tmpFilePath);
	tmpFile.Write(JSON.stringify(data));
	
	tmpFile.Close();	
}

var UpdateGUIStatus = function(msg) {
	var currentMessage = Orion.GetGlobal('gui_status');
	if (currentMessage == msg) {
		return;
	}
	Orion.SetGlobal('gui_status', msg);
	RailRecorderGUI()
}	

var lastRecordX = 0;
var lastRecordY = 0;

var RunRail = function(filepath){
	var rail = ReadFile(filepath);
	var index = 0;
	rail.forEach(function(location){
		if(Player.Dead()) return;
		if(location.type === "run"){
			var giveUpTime =  new Date().getTime() + 30000;
			while(!Orion.WalkTo(location.x, location.y, location.z, 0, 255, 1, 1, 6000) && giveUpTime > new Date().getTime()){
				Orion.Wait(1000);
			}
		}
		if(location.type === "recall"){
			Orion.Wait(6000);
			Orion.KeyPress(27);
			Orion.Wait(250);
			var startingLocation = {x: Player.X(), y: Player.Y()}
			while(Player.X() === startingLocation.x && Player.Y() === startingLocation.y){
				if(Orion.SkillValue('Chivalry') > 500){
					Orion.Cast('Sacred Journey');
				} else {
					Orion.Cast('Recall');
				}
				
				Orion.WaitForTarget(4000);
				
				var recallObjects = Orion.FindTypeEx(location.recallType, 'any', location.recallContainer);
				if(!recallObjects || recallObjects.length === 0) return;
				recallObjects = recallObjects.filter(function(object){
					var props = object.Properties();
					return props.indexOf(location.recallName) > -1;
				})
				if(!recallObjects || recallObjects.length === 0) return;
				Orion.TargetObject(recallObjects[0].Serial());
				var waitTimeout = 0;
				while(Player.X() === startingLocation.x && Player.Y() === startingLocation.y){
					Orion.Wait(1000);
					waitTimeout++;
					if(waitTimeout > 8) break;
				}
				Orion.Wait(6000);
			}
		}	
	})
}


var needsRepairs = function(){
	var getDura = function(props){
		if(!props || props.length === 0) return 255;
		var matches = /Durability (\d+)\s\/\s(\d+)/.exec(props);
		if(!matches || matches.length < 2) return 255;
		return matches[1];
	}

	var isRepairableAndNeedsRepairs = function(props){
			if(!props || props.length === 0) return false;
			if(props.indexOf("Durability ") === -1) return false;
			var durability = getDura(props);
			return 50 > durability;
	}
	var paperdollItems = [];
	 for (var i=1; i<25; i++) {
     	var item = Orion.ObjAtLayer(i);
     	if (item) {
     		paperdollItems.push(item.Serial());
     	}
     }
	if(!paperdollItems || paperdollItems.length === 0) return false;
	
	paperdollItemsNeedRepair = paperdollItems.filter(function(itemId){
		var itemObject = Orion.FindObject(itemId);
		if(!itemObject) {
			return false;
		}
		var props = itemObject.Properties();
		if(isRepairableAndNeedsRepairs(props)){
			return true;
		}
		return false;
	});
	if(paperdollItemsNeedRepair.length > 0) return true;
}

function Printout(){
	
	
	

	Orion.Print(getDura(Orion.FindObject(backpack).Properties()));
}

var isOverloaded = function(){
	var getItemCount = function(props){
		if(!props || props.length === 0) return 111;
		var matches = /Contents: (\d+)/.exec(props);
		if(!matches || matches.length < 2) return 111;
		return matches[1];
	}
	if(getItemCount(Orion.FindObject(backpack).Properties()) > 110) return true;
	if(Player.Weight() + 50 > Player.MaxWeight()) return true;
	if(Player.Weight() > 450) return true;
	
	return false;
}

function ManageRails(railDest, startupTrip){
	Orion.Print("Running manage Rails: " + railDest);
	var basePath = Orion.CurrentScriptDirPath();
	var railFilePaths = {
		house: basePath + '/RailFiles/HouseDropOff.txt',
		voidpool: basePath + '/RailFiles/VoidEntrance.txt',
		lurg: basePath + '/RailFiles/Lurg.txt',
		lurgExit: basePath + '/RailFiles/LurgExit.txt'
	};
	var runDropoff = function(){
		Orion.Print("Going To Location HOME");
		RunRail(railFilePaths.hasOwnProperty(railDest + 'Exit') ? railFilePaths[railDest + 'Exit'] : railFilePaths.house);
		//todo Wait
		Orion.Wait(120 * 1000);
		Orion.Print("Going To Location " + railDest);
		//todo go back to spot
		RunRail(railFilePaths[railDest]);
	}
	// starting Up
	if(startupTrip === 'true'){
		Orion.Print("I wanna go on a startup trip");
		RunRail(railFilePaths[railDest]);
	}
	

	while(true){
		//todo scan low durability
		Orion.Wait(1000);
		if(needsRepairs()){
			Orion.Print("I wanna go on a repair trip");
			runDropoff();
		}
	
		if(isOverloaded()){
			Orion.Print("I wanna go on a overloaded trip");
			runDropoff();
		}
		
		
		
	}
	
}
