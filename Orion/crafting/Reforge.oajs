var getDura = function(props){
        if(!props || props.length === 0) return 255;
        var matches = /Durability (\d+)\s\/\s(\d+)/.exec(props);
        if(!matches || matches.length < 2) return 255;
        return matches[1];
}

var getPOFKeg = function(){
    var pofBarrels = [];
    Orion.FindTypeEx(any, any, ground, "item", 2).forEach(function (obj)
    {
        if (Orion.Contains(obj.Properties(), "contents: "))
        {
          if (Orion.GumpExists("container", obj.Serial()))
          {
              Array.prototype.push.apply(pofBarrels, Orion.FindTypeEx('0x1940', any, obj.Serial()));
          }          
        }
      }
    );
    if(!pofBarrels || pofBarrels.length == 0) return null;
    var nonEmpty = pofBarrels.filter(function(barrel){
        return barrel.Properties().indexOf('Uses Remaining: 0') === -1 
    });
    if(!nonEmpty || nonEmpty.length == 0) return null;
    return nonEmpty[0];
}

function POFContainerLastObject(){
    
    
    var pofItem = function(itemId){
        var pof = getPOFKeg();
        if(!pof){
            Orion.Print("ran out of POF Kegs");
             return false;
        }
        var item = Orion.FindObject(itemId);
        if(!item) return false;
        var durability = getDura(item.Properties());
        if(durability >= 255) return false;
        Orion.UseObject(pof.Serial());
        Orion.WaitForTarget(2000);
        Orion.TargetObject( itemId);
        Orion.Wait(1500);
        return true;
    }
    
    var items = Orion.FindTypeEx('any', 'any', Orion.FindObject(lastobject).Serial());
    
    if(!items || items.length === 0){
        Orion.Print('No items found to POF');
    }
    
    Orion.Print("Found Items In Last Object " + items.length);
    
    var itemCount = 1;
    items.forEach(function(item){
        while(pofItem(item.Serial())){
            Orion.Print("Working on item #" + itemCount);
        }
        itemCount++;
    })
    
}


function Run(){
	Orion.Print("Target Source");
	Orion.UseSkill("Arms Lore");
	Orion.WaitForTarget();
	Orion.WaitWhileTargeting(10000);
	Orion.Wait(500);
	var source = Orion.ClientLastTarget();
	Orion.UseObject(source);
	Orion.Wait(1200);
	
	Orion.Print("Target Dest");
	Orion.UseSkill("Arms Lore");
	Orion.WaitForTarget();
	Orion.WaitWhileTargeting(10000);
	Orion.Wait(500);
	var dest = Orion.ClientLastTarget();
	Orion.UseObject(dest);
	Orion.Wait(1200);
	
	Orion.Print("Target Tool");
	Orion.UseSkill("Arms Lore");
	Orion.WaitForTarget();
	Orion.WaitWhileTargeting(10000);
	Orion.Wait(500);
	var tool = Orion.ClientLastTarget();
	var toolObject = Orion.FindObject(tool);
	var color = toolObject.Color();
	var graphic = toolObject.Graphic();
	Orion.Wait(1200);
	
	var sourceObjects = Orion.FindType('any', 'any', source);
	if(!sourceObjects || sourceObjects.length === 0) return;
	sourceObjects.forEach(function(x){
		var tools = Orion.FindType(graphic, color, backpack);
		if(!tools) return;
		var validTools = tools.filter(function(tool){
			var props = Orion.FindObject(tool).Properties();
			if(
				props.indexOf("Uses Remaining: 1\n") > -1 || 
				props.indexOf("Uses Remaining: 2\n") > -1 ||
				props.indexOf("Uses Remaining: 3\n") > -1
			){
				return false;
			}
			
			return true;
		});
		if(!validTools || validTools.length === 0) return;
		
		var props = Orion.FindObject(x).Properties();
		if(props.indexOf("Exceptional") === -1){
			Orion.MoveItem(x, 1000, dest);
			Orion.Wait(1200);
			return;
		}
		Orion.MoveItem(x);
		Orion.Wait(1500);
		
		Orion.UseObject(validTools[0]);
		if (Orion.WaitForTarget(1000))
			Orion.TargetObject(x);
		if (Orion.WaitForGump(1000))
		{
			var gump0 = Orion.GetGump('last');
			if ((gump0 !== null) && (!gump0.Replayed()) && (gump0.ID() === '0x000F3EAC'))
			{
				gump0.Select(Orion.CreateGumpHook(2));
				Orion.Wait(100);
			}
		}
		Orion.Wait(1200);
		var props = Orion.FindObject(x).Properties();
		if(props.indexOf("Damage 100%") > -1 && props.indexOf("Physical Damage") === -1){} 
		else if( props.indexOf("Luck 150") > -1){} 
		else {
			Orion.MoveItem(x, 1000, dest);
			Orion.Wait(1200);
		}
	});
}