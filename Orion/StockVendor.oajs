//#include LootEvaluator.js


function FilterItemsFromTargetToLastObject(){
	var soirceBag = Orion.ClientLastTarget();
	var targetBag = Orion.FindObject(lastobject).Serial();
	Orion.Wait(1500);
	Orion.UseObject(soirceBag);
	Orion.Wait(1500);
	var destItems = Orion.FindTypeEx('any', 'any', soirceBag, ' ', 'finddistance', ' ');
	
	destItems.forEach(function(item){
		if(shouldKeepItemEjGear(item.Properties())) {
		//if(ShouldKeepItem(item.Serial())) {
			
		}
		Orion.MoveItem(item.Serial(), 1000, targetBag, item.X(), item.Y());
			Orion.Wait(1400);

	})
}

function LockBagballsDown(){
	var findItems0 = Orion.FindType('0x2256');
	findItems0.forEach(function(item){
		Orion.MoveItem(item, 1, 'ground', Player.X() - 1, Player.Y(), Player.Z());
		Orion.Wait('1200');
		Orion.Say('i wish to secure this');
		if (Orion.WaitForTarget(1000))
			Orion.TargetObject(item);
		if (Orion.WaitForGump(1000))
		{
			Orion.Wait(500);
			var gump0 = Orion.GetGump(item, '0x00000295');
			if ((gump0 !== null) && (!gump0.Replayed()) && (gump0.ID() === '0x00000295'))
			{
				gump0.Select(Orion.CreateGumpHook(3));
				Orion.Wait(100);
			}
		}
		Orion.Wait('500');
	});
	
}
var InsureItem = function(itemId)
{
	Orion.Wait(200);
	Orion.RequestContextMenu('self');
	Orion.WaitContextMenuID('self', 418);
	if (Orion.WaitForTarget(1000))
		Orion.TargetObject(itemId);
	if (Orion.WaitForTarget(1000))
		Orion.TargetObject('0x00000000');
}
var GetPropValue = function(regex, props){
			var matches = regex.exec(props);
			if(!matches || matches.length < 2) return 0;
			return matches[1];
		}
var getSkillTotalSuffix = function(props){
		var isJewlery = (props.indexOf('Ring') > -1 && props.indexOf("Ringmail") === -1) || props.indexOf('Bracelet') > -1;
		if(!isJewlery) return "";
		
		var skills = [	"Anatomy",		"Animal Lore",		"Animal Taming",
								"Archery",			"Bushido",				"Chivalry",
								"Evaluating Inteligence",					"Fencing",
								"Focus",				"Healing",				"Macing",
								"Magery",			"Resisting Spells",	"Meditation",
								"Mysticism",		"Necromancy",		"Ninjitsu",		
								"Parrying",			"Spirit Speak",		"Stealth",		
								"Swordsmanship",							"Tactics",	
								"Throwing",		"Wrestling"];
								
		var skillTotal = 0;
		skills.forEach(function(skill){
			if(props.indexOf(skill) === -1) return;
			var skillValue = Number(props.split(skill)[1].split('\n')[0]);
			skillTotal += skillValue;
		})
		if(skillTotal < 30) return '';
		if(skillTotal  >= 30 && skillTotal < 45) return " 30Skill";
		if(skillTotal  >= 45 && skillTotal < 60) return " 45Skill";
		if(skillTotal  >= 60) return " 60Skill";
}

var generateDateTag = function() {
    var currentDate = new Date();
    var year = currentDate.getFullYear();
    var month = currentDate.getMonth() + 1;
	var day = currentDate.getDate();

	month = month < 10 ? '0' + month : month;
	day = day < 10 ? '0' + day : day;
    
    return "{" + year + month + day + "}";
}
	
function StockLobjectWLtargBagInto(){
	var soirceBag = Orion.ClientLastTarget();
	var targetBag = Orion.FindObject(lastobject).Serial();
	
	var destItems = Orion.FindTypeEx('any', 'any', soirceBag, ' ', 'finddistance', ' ', true);
	Orion.Print(soirceBag);
	Orion.Print(targetBag);
	Orion.Print(destItems);
	destItems.forEach(function(item){
		if(item.Properties().indexOf('Insured') > -1){
			InsureItem(item.Serial());
		}
		Orion.MoveItem(item.Serial(), 1000, targetBag, item.X(), item.Y());
			Orion.Wait(600);
			Orion.SendPrompt("2000000"); // + getSkillTotalSuffix(item.Properties()) + " " + generateDateTag())
			Orion.Wait(600);

	})
		
	
}

var isOverSkill = function(skillMin, props){
		var isJewlery = (props.indexOf('Ring') > -1 && props.indexOf("Ringmail") === -1) || props.indexOf('Bracelet') > -1;
		if(!isJewlery) return false;
		
		var skills = [	"Anatomy",		"Animal Lore",		"Animal Taming",
								"Archery",			"Bushido",				"Chivalry",
								"Evaluating Inteligence",					"Fencing",
								"Focus",				"Healing",				"Macing",
								"Magery",			"Resisting Spells",	"Meditation",
								"Mysticism",		"Necromancy",		"Ninjitsu",		
								"Parrying",			"Spirit Speak",		"Stealth",		
								"Swordsmanship",							"Tactics",	
								"Throwing",		"Wrestling"];
								
		var skillTotal = 0;
		skills.forEach(function(skill){
			if(props.indexOf(skill) === -1) return;
			Orion.Print(props.split(skill)[1]);
			var skillValue = Number(props.split(skill)[1].split('\n')[0]);
			skillTotal += skillValue;
		})
		Orion.Print(skillTotal);
		return skillTotal >= skillMin;
}

var isStamGear = function(props){
	
		
	var stam = GetPropValue(/Stamina Increase (\d+)/, props);
	return stam >= 6;
}

var isLrcGear = function(props){
	var isJewlery = (props.indexOf('Ring') > -1 && props.indexOf("Ringmail") === -1) || props.indexOf('Bracelet') > -1;
	if(isJewlery) return false;
		
	var lrc = GetPropValue(/Lower Reagent Cost (\d+)/, props);
	return lrc >= 10;
}
var isHpGear = function(props){
	var isJewlery = (props.indexOf('Ring') > -1 && props.indexOf("Ringmail") === -1) || props.indexOf('Bracelet') > -1;
	if(isJewlery) return false;		
	var hp = GetPropValue(/Hit Point Increase (\d+)/, props);
	return hp >= 5;
}
var isCastingJewl = function(props){
	var isJewlery = (props.indexOf('Ring') > -1 && props.indexOf("Ringmail") === -1) || props.indexOf('Bracelet') > -1;
	if(!isJewlery) return false;
	
	return props.indexOf('Faster Cast Recovery 3') > -1 || 
		props.indexOf('Faster Cast Recovery 4') > -1 || 
	 	props.indexOf('Faster Casting 1') > -1;
}

var isHciSsiJewl = function(props){
	var isJewlery = (props.indexOf('Ring') > -1 && props.indexOf("Ringmail") === -1) || props.indexOf('Bracelet') > -1;
	if(!isJewlery) return false;
	
	return props.indexOf('Swing Speed Increase') > -1 && 
		props.indexOf('Hit Chance Increase') > -1;
}
	
	
	
function StockLastTargetToVendors(){	
	var itemPrice = 100000000;
	var itemDescription = "Jawetzel";
	
	var soirceBag = Orion.ClientLastTarget();
	Orion.OpenContainer(soirceBag);
	Orion.Wait(2000);
	var sourceItems = Orion.FindTypeEx('any', 'any', soirceBag, ' ', 'finddistance', ' ', true);
	
	var vendorDist = 2; //2 if on top, higher if outside house stocking
	var vendorName = 'Shop Name:';
	var vendorSubContainers = {
		'Splinter': [],
		'Shield': [],
		'Jewl 60+': [],
		'Jewl FC+FCR': [],
		'Jewl HCI SSI': [],
		'Jewl Cast': [],
		'Stam': [],
		'HP': [],
		'LRC': [],
		'Misc': [],
	};
	var vendorTypes = [];
	for(var option in vendorSubContainers){
		vendorTypes.push(option);
	}

	var groundObjects = Orion.FindType('any', 'any', "ground", "", vendorDist);
	if(!groundObjects || groundObjects.length === 0) return;
	var vendors = groundObjects.filter(function(groundId){
		var groundObject = Orion.FindObject(groundId);
		var props = groundObject.Properties();
		var isVendor = props.indexOf(vendorName) > -1;		
		return isVendor;
	});
	vendors.forEach(function(vendor){
		var vendorObject = Orion.FindObject(vendor);
		var props = vendorObject.Properties();
		vendorTypes.forEach(function(type){
			if(props.indexOf(type) > -1){
				Orion.UseObject(vendor);
				if (Orion.WaitForGump(1000)) {
					var gump0 = Orion.GetGump('last');
					if ((gump0 !== null) && (!gump0.Replayed()) && (gump0.ID() === '0x000002AB'))
					{
						gump0.Select(Orion.CreateGumpHook(1));
						Orion.Wait(100);
					}
				}
				Orion.Wait(1300);
				var objectsInVendor = Orion.FindTypeEx('any','any', lastcontainer);
				objectsInVendor.forEach(function(vendorItemObject){
					if(vendorItemObject.Graphic() === '0x0E75') {
						vendorSubContainers[type].push(vendorItemObject.Serial());
					}
				});
			}
		});
	});
	
	sourceItems.forEach(function(sourceItem){
			var destBag = null;
			var props = sourceItem.Properties();

			var getValidBagFromBags = function(bags){
				return bags.filter(function(bagId){
					var bagObject = Orion.FindObject(bagId);
					if(!bagObject) return;
					var bagProps = bagObject.Properties();
					var itemCount = GetPropValue(/Contents: (\d+)/, bagProps);
					return (itemCount < 20);
				});			
			}
			
			var isJewlery = (props.indexOf('Ring') > -1 && 
				props.indexOf("Ringmail") === -1) || 
				props.indexOf('Bracelet') > -1;
			
			if(props.indexOf('Splintering Weapon ') > -1) {
	    		if(vendorSubContainers['Splinter'].length > 0) {
	    			var validContainers = getValidBagFromBags(vendorSubContainers['Splinter']);
	    			if(validContainers.length > 0) destBag = validContainers[0];
	    		}
	    	}
			else if(props.indexOf('Reactive Paralyze') > -1) {
	    		if(vendorSubContainers['Shield'].length > 0) {
	    			var validContainers = getValidBagFromBags(vendorSubContainers['Shield']);
	    			if(validContainers.length > 0) destBag = validContainers[0];
	    		}
	    	}			
			else if(isOverSkill(60, props)){
	    		if(vendorSubContainers['Jewl 60+'].length > 0) {
	    			var validContainers = getValidBagFromBags(vendorSubContainers['Jewl 60+']);
	    			if(validContainers.length > 0) destBag = validContainers[0];
	    		}
	    	}
			else if(	isJewlery &&  (props.indexOf('Faster Cast Recovery 3') > -1 || 
				props.indexOf('Faster Cast Recovery 4') > -1 ) && 
			 	props.indexOf('Faster Casting 1') > -1){
			 	if(vendorSubContainers['Jewl FC+FCR'].length > 0) {
	    			var validContainers = getValidBagFromBags(vendorSubContainers['Jewl FC+FCR']);
	    			if(validContainers.length > 0) destBag = validContainers[0];
	    		}
			 }
			 else if(isHciSsiJewl(props)){
	    		if(vendorSubContainers['Jewl HCI SSI'].length > 0) {
	    			var validContainers = getValidBagFromBags(vendorSubContainers['Jewl HCI SSI']);
	    			if(validContainers.length > 0) destBag = validContainers[0];
	    		}
	    	}
	    	else if(isCastingJewl(props)){
	    		if(vendorSubContainers['Jewl Cast'].length > 0) {
	    			var validContainers = getValidBagFromBags(vendorSubContainers['Jewl Cast']);
	    			if(validContainers.length > 0) destBag = validContainers[0];
	    		}
	    	}
	    	else if(isStamGear(props)){
	    		if(vendorSubContainers['Stam'].length > 0) {
	    			var validContainers = getValidBagFromBags(vendorSubContainers['Stam']);
	    			if(validContainers.length > 0) destBag = validContainers[0];
	    		}
	    	}
	    	else if(isLrcGear(props)){
	    		if(vendorSubContainers['LRC'].length > 0) {
	    			var validContainers = getValidBagFromBags(vendorSubContainers['LRC']);
	    			if(validContainers.length > 0) destBag = validContainers[0];
	    		}
	    	}
	    	else if(isHpGear(props)){
	    		if(vendorSubContainers['HP'].length > 0) {
	    			var validContainers = getValidBagFromBags(vendorSubContainers['HP']);
	    			if(validContainers.length > 0) destBag = validContainers[0];
	    		}
	    	}
			else {
				if(vendorSubContainers['Misc'].length > 0) {
	    			var validContainers = getValidBagFromBags(vendorSubContainers['Misc']);
	    			if(validContainers.length > 0) destBag = validContainers[0];
	    		}
			}
	    	
	    
	    	if(destBag){
	    		if(sourceItem.Properties().indexOf('Insured') > -1){
					InsureItem(sourceItem.Serial());
				}
				Orion.MoveItem(sourceItem.Serial(), 1000, destBag);
				Orion.Wait(600);
				Orion.Print(itemPrice);// + itemDescription + getSkillTotalSuffix(sourceItem.Properties()) + " " + generateDateTag());
				Orion.SendPrompt(itemPrice);// + itemDescription + getSkillTotalSuffix(sourceItem.Properties()) + " " + generateDateTag())
				Orion.Wait(800);
	    	}
	});
}






function UninsureContainer(){
	var targetBag = Orion.FindObject(lastobject).Serial();
	var destItems = Orion.FindTypeEx('any', 'any', targetBag, ' ', 'finddistance', ' ', true);
	Orion.Print(destItems);
	if(!destItems || destItems.length === 0) return;
	destItems.forEach(function(item){
		if(item.Properties().indexOf('Contents:') > -1) {
			Orion.Ignore(item.Serial());
		} else {
			if(item.Properties().indexOf('Insured') > -1){
				InsureItem(item.Serial());
			}
		}		
	});
}


function FillLobjectBagWithLtargetSWScrolls(){
	var scrolls = [
			'0x2D51', //SW spell
			'0x2D52', //SW spell
			'0x2D53', //immolating weapon SW Spell
			'0x2D54', //SW spell
			'0x2D55', //SW Spell
			'0x2D56', //SW Spell
			'0x2D57', //SW Spell
			'0x2D58', //SW Spell
			'0x2D59', //SW Spell
			'0x2D5A', //SW Spell
			'0x2D5B', //SW Spell
			'0x2D5C', //SW Spell
			'0x2D5D', //SW Spell
			'0x2D5E', //word of death SW spell
			'0x2D5F', //Gift Of Life SW spell
			'0x2D60', //Gift Of Life SW spell
	];
	var lastObject = lastobject;
	var x = 40;
	scrolls.forEach(function(scrollType){
		var scrolls = Orion.FindType(scrollType, 'any', 0x46618881);
		if(scrolls && scrolls.length > 0){
			Orion.MoveItem(scrolls[0], 1, lastobject, x, 50);
			x = x + 7;
			Orion.Wait(1500);
		}
	});
	
}

function RepriceVendor(){
	Orion.Print("Hello");
	// numbers under 1 will mark a percentage
	// ex: .75 will take an item that was 10,000 gold and mark it to 7,500 Gold
	// numbers over 1 will set a fixed Value
	// ex: 10000 will make the price 10,000
	var newPrice = .9;
	// this will be the description of the item (if you use a named description your vendors will be searchable
	var followUpText = "";    
	var vendordistance = 1;
	var daysBetweenReprice = 0;
	var minPrice = 7000000;
	var ddeleteBag = Orion.FindObject(lastobject).Serial();;
	// you shouldnt need to reprice below this point
	
	//finds vendors
	var groundObjects = Orion.FindType('any', 'any', "ground", "", vendordistance);
	if(!groundObjects || groundObjects.length === 0) return;
	var vendors = groundObjects.filter(function(groundId){
		var groundObject = Orion.FindObject(groundId);
		var props = groundObject.Properties();
		var isVendor = props.indexOf('Shop Name:') > -1;		
		return isVendor;
	});
		 
	
	var items = [];
	
	//finds items on vendors and opens bags in vendor
	vendors.forEach(function(vendor){
		
		var vendorObject =  Orion.FindObject(vendor);
		if(!vendorObject) return;
		var vendorDist = Orion.FindObject(vendor).Distance();
		Orion.Print("Vendor Distance: " + vendorDist);
		if(vendorDist > 2) return;
		
		Orion.Print("Opening Vendor");
		Orion.UseObject(vendor);
		if (Orion.WaitForGump(1000))
		{
			var gump0 = Orion.GetGump('last');
			if ((gump0 !== null) && (!gump0.Replayed()) && (gump0.ID() === '0x000002AB'))
			{
				gump0.Select(Orion.CreateGumpHook(1));
				Orion.Wait(100);
			}
		}
		Orion.Wait(1300);
		var objectsInVendor = Orion.FindTypeEx('any','any', lastcontainer);
		objectsInVendor.forEach(function(vendorItemObject){
			if(vendorItemObject.Graphic() === '0x0E75') {
				Orion.OpenContainer(vendorItemObject.Serial());
				Orion.Wait(1500);
				var itemsInSubBag = Orion.FindType('any','any', vendorItemObject.Serial());
				if(itemsInSubBag && itemsInSubBag.length > 0){
					itemsInSubBag.forEach(function(subBagItem){
						items.push(subBagItem);
					})
				}
			} else {
				items.push(vendorItemObject.Serial());
			}
		})
	});
	
	// filters down items based on items for sale
	var validItems = [];
	var validVendorItems = items.filter(function(itemId){
 		var item = Orion.FindObject(itemId);
 		if(item.Distance() > 2) return false;
 		var props = item.Properties();
 		 
 		if(props.indexOf("Not For Sale") > -1) return false;
 		var priceText = "Price: ";
 	 	var priceIndex = props.indexOf(priceText);
 	 	if(priceIndex === -1) return false;
 	 	return true;
    });
    if(validVendorItems && validVendorItems.length > 0){
   		var currentDate = new Date();
    	validVendorItems.forEach(function(validItem){    	
    		// should we reprice this item? 
    		// some kind of date logic here saying we arent going to reprice an item unless its date is over X days 
    		var props = Orion.FindObject(validItem).Properties();
    		//<br>Seller's Description:<br>"60Skill - {20240327}"
    		if(props.indexOf("Seller's Description") > -1){
    			var matches = /<br>Seller's Description:<br>.*?\{(\d{8})\}/.exec(props);
    			var dateStr = matches ? matches[1] : null;
    			
    			if(dateStr == null) {
    				// no date in description, assume we will be repricing
    				validItems.push(validItem);    			
    			} else {
				    var year = parseInt(dateStr.substring(0, 4), 10);
				    var month = parseInt(dateStr.substring(4, 6), 10) - 1; // JS months are 0-based
				    var day = parseInt(dateStr.substring(6, 8), 10);
				    var extractedDate = new Date(year, month, day);
    				
    				var timeDiff = currentDate - extractedDate;
    				var diffDays = timeDiff / (1000 * 60 * 60 * 24);
    				Orion.Print("diffDays: " + diffDays);
    				if(diffDays > daysBetweenReprice){
    					validItems.push(validItem);
    				}
    			}
    		} else {
    			validItems.push(validItem);    			
    		}
    		
    	})
    }
    
    Orion.Print(validItems.length);
    
    // reprices items
    var total =validItems.length;
    var index = 1;
    validItems.forEach(function(itemId){
    	 Orion.Print("Working On Item " + index + " / " + total);
    	 index++;
    	 
    	 var item = Orion.FindObject(itemId);
    	 if(!item) return;
    	 var props = item.Properties();
    	 if(props.indexOf("Not For Sale") > -1) return;
    	 
    	 var priceText = "Price: ";
    	 var priceIndex = props.indexOf(priceText);
    	 if(priceIndex === -1) return;
    	 
    	 var itemObject = Orion.FindObject(itemId);
    	 var containerId = itemObject.Container();
    	 
    	 var afterPriceText = props.substring(priceIndex + priceText.length);
    	 var priceText = afterPriceText.split("\n")[0];
    	 var cleanPriceText = priceText.split(",").join("");
    	 var number = parseInt(cleanPriceText); 
    	
    	var description = followUpText + getSkillTotalSuffix(Orion.FindObject(itemId).Properties()) + " " + generateDateTag();
    	
    	 var updatedPrice = newPrice;
    	 if(newPrice < 1){
    	 	var updatedPrice = Math.floor(number * newPrice);  
    	 }
    	 
    	  if(updatedPrice < minPrice && ddeleteBag) {
    	 	Orion.MoveItem(itemId, 5000, ddeleteBag);
    	 	Orion.Wait(1500);
    	 	return;
    	 }
    	 if(number !== newPrice || Orion.FindObject(itemId).Properties().indexOf(description) === -1) {
    	 	 var oldItemX = item.X();
	    	 var oldItemY = item.Y();
	    	 Orion.MoveItem(itemId, 1000, 'backpack');
	    	 Orion.Wait(1200);
	    	 if(Orion.FindObject(itemId).Container() !== Orion.ObjAtLayer('backpack').Serial()){
	    	 	Orion.MoveItem(itemId, 1000, 'backpack');
	    		 Orion.Wait(1200);
	    	 }
	    	 Orion.MoveItem(itemId, 1000, containerId, oldItemX, oldItemY);
	    	 Orion.Wait(700);
	    	  if(Orion.FindObject(itemId).Container() !== containerId){
	    	  	Orion.MoveItem(itemId, 1000, containerId, oldItemX, oldItemY);
	    	  	 Orion.Wait(700);
	    	  }
	    	  Orion.Print(updatedPrice)// + description)
	    	 Orion.SendPrompt(updatedPrice)// + description)
	    	 Orion.Wait(500);
    	 }    	
    })
}



function CollectGold(){
	var groundObjects = Orion.FindType('any', 'any', "ground", "", 10);
	if(!groundObjects || groundObjects.length === 0) return;
	var vendors = groundObjects.filter(function(groundId){
		var groundObject = Orion.FindObject(groundId);
		var props = groundObject.Properties();
		return props.indexOf('Shop Name:') > -1;
	});
	vendors.forEach(function(vendorId){
		Orion.UseObject(vendorId);
		if (Orion.WaitForGump(2000))
		{
		 Orion.Wait(200);
			var gump0 = Orion.GetGump('last');
			var goldToSend = gump0.TextList()[3];
			if ((gump0 !== null) && (!gump0.Replayed()) && (gump0.ID() === '0x000002AB'))
			{
				gump0.Select(Orion.CreateGumpHook(7));
				Orion.Wait(100);
			}
			Orion.Wait(200);
			Orion.Print(goldToSend.split(",").join(''));
			Orion.SendPrompt(goldToSend.split(",").join(''));
		}
		Orion.Wait(1100);
		
	});
}

function OrgLoot(){
	

	var groundObjects = Orion.FindType('any', 'any', "ground", "", 2);
	if(!groundObjects || groundObjects.length === 0) return;
	var vendors = groundObjects.filter(function(groundId){
		var groundObject = Orion.FindObject(groundId);
		var props = groundObject.Properties();
		var isVendor = props.indexOf('Shop Name:') > -1;
		return isVendor;
	});
		 
	
	var items = [];
	
	//finds items on vendors and opens bags in vendor
	vendors.forEach(function(vendor){
		
		var vendorObject =  Orion.FindObject(vendor);
		if(!vendorObject) return;
		var vendorDist = Orion.FindObject(vendor).Distance();
		Orion.Print("Vendor Distance: " + vendorDist);
		if(vendorDist > 2) return;
		
		Orion.Print("Opening Vendor");
		Orion.UseObject(vendor);
		if (Orion.WaitForGump(1000))
		{
			var gump0 = Orion.GetGump('last');
			if ((gump0 !== null) && (!gump0.Replayed()) && (gump0.ID() === '0x000002AB'))
			{
				gump0.Select(Orion.CreateGumpHook(1));
				Orion.Wait(100);
			}
		}
		Orion.Wait(1300);
		var objectsInVendor = Orion.FindTypeEx('any','any', lastcontainer);
		objectsInVendor.forEach(function(vendorItemObject){
			if(vendorItemObject.Graphic() === '0x0E75') {
				Orion.OpenContainer(vendorItemObject.Serial());
				Orion.Wait(1500);
				var itemsInSubBag = Orion.FindType('any','any', vendorItemObject.Serial());
				if(itemsInSubBag && itemsInSubBag.length > 0){
					itemsInSubBag.forEach(function(subBagItem){
						items.push(subBagItem);
					})
				}
			} else {
				items.push(vendorItemObject.Serial());
			}
		})
	});
	
	// filters down items based on items for sale
	var validItems = [];
	var validVendorItems = items.filter(function(itemId){
 		var item = Orion.FindObject(itemId);
 		if(item.Distance() > 2) return false;
 		var props = item.Properties();
 		 
 		if(props.indexOf("Not For Sale") > -1) return false;
 		var priceText = "Price: ";
 	 	var priceIndex = props.indexOf(priceText);
 	 	if(priceIndex === -1) return false;
 	 	return true;
    });
    if(validVendorItems && validVendorItems.length > 0){
    	validVendorItems.forEach(function(validItem){
    		validItems.push(validItem);
    	})
    }
    
    validVendorItems.forEach(function(itemId){
	    var item = Orion.FindObject(itemId);
    	//if(isOverSkill(60, item.Properties())){
    	//	Orion.MoveItem(itemId, 1, '0x42511729');
    	//	Orion.Wait(1500);
    	//}
    	//if(isStamGear(item.Properties())){
    	//	Orion.MoveItem(itemId, 1, '0x42511729');
    	//	Orion.Wait(1500);
    	//}
    	//
    	//if(isLrcGear(item.Properties())){
    	//	Orion.MoveItem(itemId, 1, '0x42511729');
    	//	Orion.Wait(1500);
    	//}
    	
    	//if(isHpGear(item.Properties())){
    	//	Orion.MoveItem(itemId, 1, '0x42511729');
    	//	Orion.Wait(1500);
    	//}
    	//if(isCastingJewl(item.Properties())){
    	//	Orion.MoveItem(itemId, 1, '0x42511729');
    	//	Orion.Wait(1500);
    	//}
    	//if(isHciSsiJewl(item.Properties())){
    	//	Orion.MoveItem(itemId, 1, '0x42511729');
    	//	Orion.Wait(1500);
    	//}
    	//if(item.Properties().indexOf('Splintering Weapon ') > -1) {
    	//	Orion.MoveItem(itemId, 1, '0x42511729');
    	//	Orion.Wait(1500);
    	//}
    	
    	//if(item.Properties().indexOf('Reactive Paralyze') > -1) {
    	//	Orion.MoveItem(itemId, 1, '0x42511729');
    	//	Orion.Wait(1500);
    	//}
    	
		var isJewlery = (item.Properties().indexOf('Ring') > -1 && 
			item.Properties().indexOf("Ringmail") === -1) || 
			item.Properties().indexOf('Bracelet') > -1;
			
		if(	isJewlery &&  (item.Properties().indexOf('Faster Cast Recovery 3') > -1 || 
			item.Properties().indexOf('Faster Cast Recovery 4') > -1 ) && 
		 	item.Properties().indexOf('Faster Casting 1') > -1){
		 	Orion.MoveItem(itemId, 1, '0x41C5BB6C');
		 	Orion.Wait(1500);
		 	}
			
		//if(!isJewlery) {
    	//	Orion.MoveItem(itemId, 1, '0x42511729');
    	//	Orion.Wait(1500);
    	//}

    })
}

function CountItemsInBag() {
    // Prompt the user to target an item
    Orion.UseSkill('Arms Lore');
    Orion.Print("Select an item to count in your bag.");
    Orion.WaitForTarget();
    Orion.Wait(5000);
    var target = Orion.FindObject(Orion.ClientLastTarget());
    
    if (!target) {
        Orion.Print("No item selected. Exiting script.");
        return;
    }

    // Get the graphic ID and color of the targeted item
    var itemGraphic = target.Graphic();
    var itemColor = target.Color();
    
    // Search the player's backpack for items matching the targeted item's graphic and color
    var items = Orion.FindType(itemGraphic, itemColor, target.Container());

    // Display the count of matching items
    Orion.Print("You have " + items.length + " of this item in your backpack.");
}
